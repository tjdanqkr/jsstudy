{"version":3,"sources":["MyComponent.js","LifeCycleSample.js","EventPractice.js","VaildationSample.js","ScrollBox.js","App.js","serviceWorker.js","index.js"],"names":["MyComponent","state","number","_this2","this","react_default","a","createElement","props","name","age","onClick","setState","Component","defaultProps","LifeCycleSample","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","color","myRef","handleClick","console","log","nextProps","nextState","prevProps","prevState","style","snapshot","ref","App","Math","floor","random","toString","round","src_LifeCycleSample","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAGMA,oNAUFC,MAAM,CACFC,OAAO,2EAEH,IAAAC,EAAAC,KACJ,OACIC,EAAAC,EAAAC,cAAA,wEACkBH,KAAKI,MAAMC,KAD7B,uBACwCJ,EAAAC,EAAAC,cAAA,WADxC,mCAEYH,KAAKI,MAAME,IAFvB,uBAEgCL,EAAAC,EAAAC,cAAA,WAFhC,iBAGSH,KAAKH,MAAMC,OAAOG,EAAAC,EAAAC,cAAA,WACvBF,EAAAC,EAAAC,cAAA,UAAQI,QAAS,WACbR,EAAKS,SAAS,CACVV,OAAQC,EAAKF,MAAMC,OAAS,MAFpC,8BAnBUW,cAApBb,EAGKc,aAAa,CAChBL,KAAO,gBAkCAT,kBCuBAe,GC9DaF,kBCCGA,YCDPA,wBHMpB,SAAAE,EAAYP,GAAM,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMI,KANVP,MAAO,CACHC,OAAS,EACToB,MAAQ,MAGMN,EADlBO,MAAM,KACYP,EAoBlBQ,YAAY,WACRR,EAAKJ,SAAS,CACVV,OAAQc,EAAKf,MAAMC,OAAO,KApB9BuB,QAAQC,IAAI,eAFEV,mFAWdS,QAAQC,IAAI,mEAEMC,EAAUC,GAE5B,OADAH,QAAQC,IAAI,wBAAwBC,EAAUC,GACvCA,EAAU1B,OAAO,KAAK,iDAE7BuB,QAAQC,IAAI,wEAQQG,EAAUC,GAG9B,OAFAL,QAAQC,IAAI,2BAETG,EAAUP,QAAQQ,EAAUR,MACpBlB,KAAKmB,MAAMQ,MAAMT,MACpB,gDAEOO,EAAUC,EAAUE,GACnCP,QAAQC,IAAI,qBAAqBG,EAAUC,GACxCE,GACCP,QAAQC,IAAI,kEAAgBM,oCAG5B,IAAA7B,EAAAC,KACJqB,QAAQC,IAAI,UACZ,IAAMK,EAAO,CACTT,MAAQlB,KAAKI,MAAMc,OAEvB,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIwB,MAAOA,EAAOE,IAAK,SAAAA,GAAG,OAAG9B,EAAKoB,MAAMU,IACnC7B,KAAKH,MAAMC,QAEhBG,EAAAC,EAAAC,cAAA,kBAAUH,KAAKH,MAAMqB,OACrBjB,EAAAC,EAAAC,cAAA,UAAQI,QAASP,KAAKoB,aAAtB,0EA7CoBG,EAAWG,GACvC,OAAGH,EAAUL,QAAQQ,EAAUR,MACrB,CAACA,MAAOK,EAAUL,OACpB,YAbcT,kBIyEfqB,6MA/DbjC,MAAM,CACJqB,MAAQ,aAEVE,YAAY,WACVR,EAAKJ,SAAS,CACZU,MATG,IAAKa,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,+EAkB5CH,KAAKI,MAAoB,IAAdJ,KAAKE,UACjBF,KAAKI,MAAoB,IAAdJ,KAAKE,UAKzB,OAiCChC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQI,QAASP,KAAKoB,aAAtB,4BACAnB,EAAAC,EAAAC,cAACiC,EAAD,CAAiBlB,MAAOlB,KAAKH,MAAMqB,gBAxDxBT,aCCE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.df0ddbe1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MyComponent extends Component{\r\n    // prop 고정값 ,state 는 변화됨 \r\n    // prop 이라고 무조건 고정은아님 \r\n    static defaultProps={\r\n        name : 'ㅋㅋ'\r\n    }\r\n    static propTypes={\r\n        name: PropTypes.string,\r\n        age: PropTypes.number.isRequired\r\n    }\r\n    state={\r\n        number:0\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                안녕하세요, 제 이름은 {this.props.name } 입니다.<br></br>\r\n                저의 나이는 {this.props.age} 입니다.<br></br>\r\n                숫자: {this.state.number}<br/>\r\n                <button onClick={()=>{\r\n                    this.setState({\r\n                        number: this.state.number + 1\r\n                    })\r\n                }\r\n                }>더하기</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n/*\r\nMyComponent.defaultProps={\r\n    name : '기본이름'\r\n}\r\n*//*\r\nMyComponent.propTypes={\r\n    name: PropTypes.string\r\n}*/\r\nexport default MyComponent;","import React, {Component} from 'react';\r\n\r\nclass LifeCycleSample extends Component{\r\n    state ={\r\n        number : 0,\r\n        color : null,\r\n    }\r\n    myRef=null;\r\n    constructor(props){\r\n        super(props);\r\n        console.log('constructor');\r\n    }\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        if(nextProps.color!==prevState.color){\r\n            return{color: nextProps.color};\r\n        }return null;\r\n\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n    }\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        console.log('shouldComponentUpdate',nextProps,nextState);\r\n        return nextState.number%10!==4;\r\n    }componentWillUnmount(){\r\n        console.log('componentWillUnmount');\r\n\r\n    }\r\n    handleClick=()=>{\r\n        this.setState({\r\n            number: this.state.number+1\r\n        });\r\n    }\r\n    getSnapshotBeforeUpdate(prevProps,prevState){\r\n        console.log('getSnapshotBeforeUpdate');\r\n\r\n        if(prevProps.color!==prevState.color){\r\n            return this.myRef.style.color;\r\n        }return null;\r\n    }\r\n    componentDidUpdate(prevProps,prevState,snapshot){\r\n        console.log('componentDidUpdate',prevProps,prevState);\r\n        if(snapshot){\r\n            console.log('업데이트 되기 직전 색상',snapshot);\r\n        }\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        const style ={\r\n            color : this.props.color\r\n        };\r\n        return (\r\n            <div>\r\n                <h1 style={style} ref={ref=> this.myRef=ref}>\r\n                    {this.state.number}\r\n                </h1>\r\n                <p>color:{this.state.color}</p>\r\n                <button onClick={this.handleClick}>\r\n                    더하기\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LifeCycleSample;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass EventPractice extends Component{\r\n    state ={\r\n        messege:'',\r\n        username:''\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n\r\n    }\r\n    handleChange(e){\r\n        this.setState({\r\n           \r\n            [e.target.name]:e.target.value\r\n        });\r\n    }\r\n    handleClick(){\r\n        alert(this.state.username + ':'+this.state.messege);\r\n        this.setState({\r\n            messege:'',username:''\r\n        });\r\n    }\r\n    handleKeyPress=(e)=>{\r\n        if(e.key==='Enter'){\r\n            this.handleClick();\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>이벤트 연습</h1>\r\n                <input type='text' name ='username' value={this.state.username} placeholder='유저네임' onChange={this.handleChange}></input>\r\n                <input type='text' name='messege' value={this.state.messege} placeholder='아무거나 입력하세요' onChange={this.handleChange} onKeyPress={this.handleKeyPress}></input>\r\n                <button onClick={this.handleClick}>확인</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default EventPractice;","import React, {Component} from 'react';\r\nimport './ValidationSample.css';\r\n\r\nclass ValidationSample extends Component{\r\n    state={\r\n        password:'',\r\n        clicked: false,\r\n        validated:false\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            password:e.target.value\r\n        });\r\n    }\r\n    handleButtonClick = ()=>{\r\n        this.setState({\r\n            clicked:true,\r\n            validated: this.state.password==='0000'\r\n        });\r\n        this.input.focus();\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input ref={(ref) => this.input=ref} type='password' value={this.state.password} onChange={this.handleChange} className={this.state.clicked?(this.state.validated ? 'success':'failure'):''}></input>\r\n                <button onClick={this.handleButtonClick}>검증하기</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default ValidationSample;","import React, {Component} from 'react';\r\n\r\nclass ScrollBox extends Component{\r\n    scrollToBottom=()=>{\r\n        const {scrollHeight, clientHeight}= this.box;\r\n        this.box.scrollTop= scrollHeight - clientHeight;\r\n    };\r\n    render(){\r\n        const style={\r\n            border: '1px solid black',\r\n            height: '300px',\r\n            width:'300px',\r\n            overflow:'auto',\r\n            position: 'relative'\r\n        };\r\n        const innerStyle={\r\n            width:'100%',\r\n            height:'650px',\r\n            background: 'linear-grandient(white,black)'\r\n        };\r\n        \r\n        return(\r\n            <div style={style} ref={(ref)=> {this.box=ref}}>\r\n                <div style={innerStyle}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ScrollBox;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport MyComponent from './MyComponent.js';\r\nimport EventPractice from './EventPractice.js';\r\nimport VaildationSample from './VaildationSample.js';\r\nimport ScrollBox from './ScrollBox.js';\r\nimport LifeCycleSample from './LifeCycleSample';\r\nfunction getrandomcolor() {\r\n  return '#'+ Math.floor(Math.random()*16777215).toString(16);\r\n  \r\n}\r\nclass App extends Component{\r\n  state={\r\n    color : '#000000'\r\n  } \r\n  handleClick=()=>{\r\n    this.setState({\r\n      color : getrandomcolor()\r\n    });\r\n  }\r\n  render(){\r\n    const text ='당신은 어썸한가요?';\r\n    const condition = true;\r\n    const style={\r\n      backgroundColor : 'gray',\r\n      border : '1px solid black',\r\n      height: Math.round(Math.random()*300)+50,\r\n      width: Math.round(Math.random()*300)+50,\r\n      WebkitTransition:'all',\r\n      MozTransition: 'all',\r\n      msTransition:'all'\r\n    };\r\n    return(\r\n      /*\r\n      <div className=\"my-div\">\r\n        \r\n        <h1>리액트 안녕!</h1>\r\n        <h2>{text}</h2>\r\n        {\r\n          condition ? '참' : '거짓'\r\n        }\r\n        {condition && '보여주세요'}\r\n        <div style={style}></div>\r\n        <div>\r\n           주석 안됨 \r\n          //안됨<br/>\r\n          <input type='text' name='first name'></input><br/>\r\n          <input type='text' name='last name'></input>\r\n        </div>\r\n      </div>\r\n      */\r\n     /*<div>\r\n       <MyComponent age={2} />\r\n\r\n     </div>*/\r\n     /*<div>\r\n       <EventPractice></EventPractice>\r\n     </div>*/\r\n     /*<div>\r\n       <VaildationSample></VaildationSample>\r\n     </div>*/\r\n     /*<div>\r\n      <ScrollBox ref={(ref)=>this.ScrollBox=ref}></ScrollBox>\r\n      <button onClick={()=>this.ScrollBox.scrollToBottom()}> 맨밑으로</button>\r\n     </div>*/\r\n     <div>\r\n       <button onClick={this.handleClick}>랜덤색상</button>\r\n       <LifeCycleSample color={this.state.color}></LifeCycleSample>\r\n\r\n     </div>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}